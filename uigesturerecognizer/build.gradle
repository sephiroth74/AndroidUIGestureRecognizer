apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'org.jetbrains.dokka-android'

coveralls {
    jacocoReportPath = "${buildDir}/reports/coverage/debug/report.xml"
}

tasks.coveralls {
    dependsOn 'connectedAndroidTest'
    onlyIf { System.env.'CI' }
}

jacoco {
    toolVersion = "0.8.10"
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    testBuildType "debug"

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        namespace "it.sephiroth.android.library.uigestures"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
//        testInstrumentationRunnerArguments clearPackageData: 'true'
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
        }
    }

    sourceSets {
        androidTest {
            setRoot 'src/androidTest'
        }
    }

    lintOptions {
        htmlReport false
        xmlReport false
        textReport true
        textOutput "stdout"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true

            all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }

    dokka {
        skipEmptyPackages = true
        includeNonPublic = false
        skipDeprecated = true
        reportUndocumented = true
        outputFormat = 'gfm'
        outputDirectory = "$rootDir/docs"

        linkMapping {
            // Source directory
            dir = "src/main/java"

            // URL showing where the source code can be accessed through the web browser
            url = "https://github.com/sephiroth74/AndroidUIGestureRecognizer/tree/master/uigesturerecognizer/src/main/java"

            // Suffix which is used to append the line number to the URL. Use #L for GitHub
            suffix = "#L"
        }
    }

}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../javadoc/")
    title = "Android UIGestureRecognizer $VERSION_NAME"
    description = "AndroidGestureRecognizer is an Android implementation of the Apple's UIGestureRecognizer framework."
    failOnError false

    options {
        author true
        docTitle "Android UIGestureRecognizer $VERSION_NAME"
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for the ${name.capitalize()} build."

    reports {
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from(files([mainSrc]))
    classDirectories.from(files([debugTree]))
    executionData.from(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/coverage.ec'
    ]))
}

task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'jacocoTestReport') {

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from(files([mainSrc]))
    classDirectories.from(files([debugTree]))
    executionData.from(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/coverage.ec'
    ]))


    violationRules {
        setFailOnViolation(true)

        rule {
            element = 'PACKAGE'

            limit {
                value = 'COVEREDRATIO'
                counter = 'BRANCH'
                minimum = 0.8
            }
        }

        rule {
            element = 'PACKAGE'

            limit {
                value = 'COVEREDRATIO'
                counter = 'INSTRUCTION'
                minimum = 0.6
            }
        }

        rule {
            element = 'PACKAGE'
            includes = ['it.sephiroth.android.library.*']
            enabled = true

            limit {
                counter = 'CLASS'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
    }
}


dependencies {
    implementation 'androidx.annotation:annotation:1.7.1'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}"

    implementation 'com.android.support:multidex:1.0.3'

    debugImplementation 'com.google.android.material:material:1.11.0'
    debugImplementation 'androidx.appcompat:appcompat:1.6.1'

    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'androidx.test:runner:1.5.2'
    testImplementation 'androidx.test:rules:1.5.0'
    testImplementation 'androidx.test.ext:junit:1.1.5'
    testImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    testImplementation 'org.robolectric:robolectric:4.8'

    androidTestImplementation('com.jakewharton.timber:timber:5.0.1') {
        exclude group: 'org.jetbrains', module: 'annotations'
    }

    androidTestImplementation 'com.google.android.material:material:1.11.0'
    androidTestImplementation 'androidx.appcompat:appcompat:1.6.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-idling-resource:3.5.1'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.3.0'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'


    androidTestUtil 'androidx.test:orchestrator:1.4.2'
}


tasks.all {
    task ->
        if (task.name.equals("bundleDebug") || task.name.equals("bundleRelease")) {
            task.dependsOn('check')
        }
}

